name: "Install HELICS"
description: "Installs HELICS from releases or a nightly build"

inputs:
  version:
    description: "HELICS version to install. Default is `v3`. Use `nightly` to install the latest successful nightly HELICS build."
    default: "v3"
  build_from_source:
    description: "Install HELICS by building from a source archive. Slow (10-15 minutes). Default off, set to `true` to enable."
    default: ""
  prefix:
    description: "Install prefix for HELICS. Default is /usr/local on Linux/macOS, and $HOME/AppData/Local/gmlc-tdc/helics on Windows"
  token:
    description: "Personal access token (PAT) used to access the GitHub API for fetching release info. The post job step logs out of gh cli after."
    default: ${{ github.token }}
outputs:
  version:
    description: "Version of HELICS that was installed"
    value: ${{ steps.newest-matching-version.outputs.version }}
  prefix:
    description: "HELICS install prefix"
runs:
  using: "composite"
  steps:
    - id: gh-cli-auth
      shell: bash
      run: echo "${{inputs.token}}" | gh auth login --with-token

    - id: newest-matching-version
      if: inputs.version != 'nightly'
      shell: bash
      run: |
        # list most recent 100 releases, ignore "Pre-release" lines, then get the most recent tag that matches
        NEWEST_VERSION_MATCH=$(gh release list --repo GMLC-TDC/HELICS --limit 100 | grep -v "Pre-release" | cut -f3 | grep "${{ inputs.version }}" | head -n1)
        echo "::set-output name=version::$(echo $NEWEST_VERSION_MATCH)"

    # Install ninja for source builds
    - uses: seanmiddleditch/gha-setup-ninja@856654e80dd21909aec244cd01bb96e5c841d64f
      if: inputs.build_from_source
      with:
        destination: "${{ runner.temp }}/ninja-build"

    # Install HELICS
    - id: download-install-helics
      shell: bash
      run: |
        # Set the install prefix and platform specific sudo command
        case "$(uname -s)" in
          Linux*) INSTALL_PREFIX="/usr/local" && sudo_cmd=sudo;;
          Darwin*) INSTALL_PREFIX="/usr/local" && sudo_cmd=sudo;;
          MINGW*) INSTALL_PREFIX="${HOME}/AppData/Local/gmlc-tdc/helics" && sudo_cmd="";;
          *) exit 1
        esac
        if [[ "${{inputs.prefix}}" != "" ]]; then INSTALL_PREFIX="${{inputs.prefix}}"; fi
        export INSTALL_PREFIX
        export sudo_cmd

        # Make sure the parent install prefix directory exists
        if [[ "$(uname -s)" == MINGW* || "${{inputs.prefix}}" != "" ]]; then mkdir -p "$INSTALL_PREFIX"; fi

        # Make the HELICS version to fetch accessible to later steps
        HELICS_VERSION="${{steps.newest-matching-version.outputs.version}}"
        export HELICS_VERSION

        # Install HELICS
        if [[ "${{inputs.build_from_source}}" != "true" ]]; then
          "${GITHUB_ACTION_PATH}"/install-helics-binary.sh
        else
          "${GITHUB_ACTION_PATH}"/install-helics-source.sh
        fi

        # add to PATH on Windows
        if [[ "$(uname -s)" == MINGW* || "${{inputs.prefix}}" != "" ]]; then echo "$INSTALL_PREFIX/bin" >> $GITHUB_PATH; fi
        echo "::set-output name=prefix::$(echo $INSTALL_PREFIX)"

    - id: remove-ninja-install
      if: inputs.build_from_source
      shell: bash
      run: rm -rf "${{ runner.temp }}/ninja-build"

    - id: gh-cli-logout
      shell: bash
      run: gh auth logout --hostname github.com
